(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/asyncToGenerator'), require('@babel/runtime/regenerator'), require('broker-factory')) :
    typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/asyncToGenerator', '@babel/runtime/regenerator', 'broker-factory'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.extendableMediaRecorderWavEncoderBroker = {}, global._asyncToGenerator, global._regeneratorRuntime, global.brokerFactory));
})(this, (function (exports, _asyncToGenerator, _regeneratorRuntime, brokerFactory) { 'use strict';

    var wrap = brokerFactory.createBroker({
      characterize: function characterize(_ref) {
        var call = _ref.call;
        return function () {
          return call('characterize');
        };
      },
      encode: function encode(_ref2) {
        var call = _ref2.call;
        return function (recordingId, timeslice) {
          return call('encode', {
            recordingId: recordingId,
            timeslice: timeslice
          });
        };
      },
      record: function record(_ref3) {
        var call = _ref3.call;
        return /*#__PURE__*/function () {
          var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(recordingId, sampleRate, typedArrays) {
            return _regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return call('record', {
                    recordingId: recordingId,
                    sampleRate: sampleRate,
                    typedArrays: typedArrays
                  }, typedArrays.map(function (_ref5) {
                    var buffer = _ref5.buffer;
                    return buffer;
                  }));
                case 2:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          return function (_x, _x2, _x3) {
            return _ref4.apply(this, arguments);
          };
        }();
      }
    });
    var load = function load(url) {
      var worker = new Worker(url);
      return wrap(worker);
    };

    exports.load = load;
    exports.wrap = wrap;

}));
