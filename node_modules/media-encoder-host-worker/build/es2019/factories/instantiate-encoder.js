export const createInstantiateEncoder = (closePort, encoderInstancesRegistry, pickCapableEncoderBroker) => {
    return (encoderId, mimeType, sampleRate) => {
        if (encoderInstancesRegistry.has(encoderId)) {
            throw new Error(`There is already an encoder registered with an id called "${encoderId}".`);
        }
        const encoderBroker = pickCapableEncoderBroker(mimeType);
        const { port1, port2 } = new MessageChannel();
        const entry = [encoderBroker, port1, true, sampleRate];
        encoderInstancesRegistry.set(encoderId, entry);
        port1.onmessage = ({ data }) => {
            if (data.length === 0) {
                closePort(port1);
                entry[2] = false;
            }
            else {
                encoderBroker.record(encoderId, sampleRate, data.map((channelDataOrNumberOfSamples) => typeof channelDataOrNumberOfSamples === 'number'
                    ? new Float32Array(channelDataOrNumberOfSamples)
                    : channelDataOrNumberOfSamples));
            }
        };
        return port2;
    };
};
//# sourceMappingURL=instantiate-encoder.js.map