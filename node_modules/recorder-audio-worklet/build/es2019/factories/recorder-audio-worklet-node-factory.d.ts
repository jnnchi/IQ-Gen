import type { TAudioWorkletNodeConstructor, TContext, TNativeAudioWorkletNodeConstructor, TNativeContext } from 'standardized-audio-context';
import type { on as onFunction } from 'subscribable-things';
import type { validateState as validateStateFunction } from '../functions/validate-state';
import { INativeRecorderAudioWorkletNode, IRecorderAudioWorkletNode } from '../interfaces';
import { TAnyRecorderAudioWorkletNodeOptions } from '../types';
import type { createListener as createListenerFunction } from './listener';
import type { createPostMessageFactory } from './post-message-factory';
export declare const createRecorderAudioWorkletNodeFactory: (createListener: typeof createListenerFunction, createPostMessage: ReturnType<typeof createPostMessageFactory>, on: typeof onFunction, validateState: typeof validateStateFunction) => <T extends TContext | TNativeContext>(audioWorkletNodeConstructor: T extends TContext ? TAudioWorkletNodeConstructor : TNativeAudioWorkletNodeConstructor, context: T, options?: Partial<TAnyRecorderAudioWorkletNodeOptions<T>>) => T extends TContext ? IRecorderAudioWorkletNode<T> : INativeRecorderAudioWorkletNode;
//# sourceMappingURL=recorder-audio-worklet-node-factory.d.ts.map